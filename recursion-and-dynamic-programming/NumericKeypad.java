/*
Given a keypad, like that on a mobile phone, and an integer n,
determine the number of codes of length n that can be generated by the keypad.
you can move, up, down, left, or right and cannot press the # or * buttons.

char[][]: keypad (distinct chars)

input:
    int: len (length of code)

output:
    int: # of all possible codes with length = len

code:
next char: up, down, left, right, same

1 2 3
4 5 6
7 8 9
# 0 *

valid code: aaa, adg, ade, abc
invalid code: aeh, ^2h, acb

Count for numbers of length 1: 10
Count for numbers of length 2: 36
Count for numbers of length 3: 138
Count for numbers of length 4: 532
Count for numbers of length 5: 2062
*/

import java.util.*;

public class NumericKeypad {
    public static char[][] keypad;
    public static HashMap<String, Integer> memo;

    public static int possibleNumbers(int n) {
        int uniqueNumbers = 0;
        // kick the recursive call off at each key, to explore all paths
        // from each starting point
        uniqueNumbers += possibleNumbers(n, 0, 0, 0);  // 1
        uniqueNumbers += possibleNumbers(n, 0, 0, 1);  // 2
        uniqueNumbers += possibleNumbers(n, 0, 0, 2);  // 3
        uniqueNumbers += possibleNumbers(n, 0, 1, 0);  // 4
        uniqueNumbers += possibleNumbers(n, 0, 1, 1);  // 5
        uniqueNumbers += possibleNumbers(n, 0, 1, 2);  // 6
        uniqueNumbers += possibleNumbers(n, 0, 2, 0);  // 7
        uniqueNumbers += possibleNumbers(n, 0, 2, 1);  // 8
        uniqueNumbers += possibleNumbers(n, 0, 2, 2);  // 9
        uniqueNumbers += possibleNumbers(n, 0, 3, 1);  // 0

        return uniqueNumbers;
    }

    public static int possibleNumbers(int keysRemaining, int uniqueNumbers, int row, int col) {
        if (keysRemaining == 1) {
            return 1;
        } else if (keysRemaining == 0) {
            return 0;
        }

        String key = keysRemaining + ":" + row + "," + col;
        if (memo.containsKey(key)) {
            return memo.get(key);
        }

        // System.out.println("Exploring at: " + keypad[row][col]);

        // if possible: move up, down, left, right, and none
        if (row > 0) {
            // System.out.println("Moving up!");
            uniqueNumbers += possibleNumbers(keysRemaining - 1, 0, row - 1, col);
        }
        if (row < 3 && (row != 2 || col == 1)) {
            // System.out.println("Moving down!");
            uniqueNumbers += possibleNumbers(keysRemaining - 1, 0, row + 1, col);
        }
        if (col > 0 && !(row == 3 && col == 1)) {
            // System.out.println("Moving left!");
            uniqueNumbers += possibleNumbers(keysRemaining - 1, 0, row, col - 1);
        }
        if (col < 2 && !(row == 3 && col == 1)) {
            // System.out.println("Moving right!");
            uniqueNumbers += possibleNumbers(keysRemaining - 1, 0, row, col + 1);
        }
        // System.out.println("Not moving!");
        uniqueNumbers += possibleNumbers(keysRemaining - 1, 0, row, col);

        // System.out.println("Returning: " + uniqueNumbers);
        memo.put(key, uniqueNumbers);
        return uniqueNumbers;
    }

    public static void printKeypad() {
        System.out.println("Keypad: ");
        for (char[] row : keypad) {
            for (char button : row) {
                System.out.print(button + "\t");
            }
            System.out.println();
        }
    }

    public static void printTabs(int n) {
        for (int i = 0; i < n; i++) {
            System.out.print("    ");
        }
    }

    public static void main(String[] args) {
        memo = new HashMap<String, Integer>();
        keypad = new char[4][3];
        keypad[0][0] = '1';
        keypad[0][1] = '2';
        keypad[0][2] = '3';
        keypad[1][0] = '4';
        keypad[1][1] = '5';
        keypad[1][2] = '6';
        keypad[2][0] = '7';
        keypad[2][1] = '8';
        keypad[2][2] = '9';
        keypad[3][0] = '#';
        keypad[3][1] = '0';
        keypad[3][2] = '*';

        printKeypad();

        System.out.println("Testing 1, should yield 10: " + possibleNumbers(1));
        System.out.println("Testing 2, should yield 36: " + possibleNumbers(2));
        System.out.println("Testing 3, should yield 138: " + possibleNumbers(3));
        System.out.println("Testing 4, should yield 532: " + possibleNumbers(4));
        System.out.println("Testing 5, should yield 2062: " + possibleNumbers(5));
    }
}
